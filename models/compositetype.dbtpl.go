package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// CompositeType is a composite type.
type CompositeType struct {
	TypeName   string `json:"type_name"`   // type_name
	SchemaName string `json:"schema_name"` // schema_name
	Comment    string `json:"comment"`     // comment
}

// PostgresCompositeTypes runs a custom query, returning results as [CompositeType].
func PostgresCompositeTypes(ctx context.Context, db DB, schema string) ([]*CompositeType, error) {
	// query
	const sqlstr = `SELECT ` +
		`t.typname, ` + // ::varchar AS type_name
		`n.nspname, ` + // ::varchar AS schema_name
		`COALESCE(obj_description(t.oid, 'pg_type'), '') ` + // ::varchar AS comment
		`FROM pg_type t ` +
		`JOIN ONLY pg_namespace n ON n.oid = t.typnamespace ` +
		`WHERE t.typtype = 'c' ` +
		`AND t.typrelid > 0 ` +
		`AND n.nspname = $1 ` +
		`ORDER BY t.typname`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*CompositeType
	for rows.Next() {
		var ct CompositeType
		// scan
		if err := rows.Scan(&ct.TypeName, &ct.SchemaName, &ct.Comment); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ct)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
