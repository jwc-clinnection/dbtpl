package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// CompositeTypeAttr is a composite type attribute.
type CompositeTypeAttr struct {
	FieldOrdinal int    `json:"field_ordinal"` // field_ordinal
	AttrName     string `json:"attr_name"`     // attr_name
	DataType     string `json:"data_type"`     // data_type
	NotNull      bool   `json:"not_null"`      // not_null
	Comment      string `json:"comment"`       // comment
}

// PostgresCompositeTypeAttrs runs a custom query, returning results as [CompositeTypeAttr].
func PostgresCompositeTypeAttrs(ctx context.Context, db DB, schema, type_name string) ([]*CompositeTypeAttr, error) {
	// query
	const sqlstr = `SELECT ` +
		`a.attnum, ` + // ::integer AS field_ordinal
		`a.attname, ` + // ::varchar AS attr_name
		`format_type(a.atttypid, a.atttypmod), ` + // ::varchar AS data_type
		`a.attnotnull, ` + // ::boolean AS not_null
		`COALESCE(d.description, '') ` + // ::varchar AS comment
		`FROM pg_attribute a ` +
		`JOIN pg_type t ON t.typrelid = a.attrelid ` +
		`JOIN ONLY pg_namespace n ON n.oid = t.typnamespace ` +
		`LEFT JOIN pg_description d ON d.objoid = a.attrelid ` +
		`AND d.objsubid = a.attnum ` +
		`WHERE t.typtype = 'c' ` +
		`AND t.typrelid > 0 ` +
		`AND n.nspname = $1 ` +
		`AND t.typname = $2 ` +
		`AND a.attisdropped = false ` +
		`AND a.attnum > 0 ` +
		`ORDER BY a.attnum`
	// run
	logf(sqlstr, schema, type_name)
	rows, err := db.QueryContext(ctx, sqlstr, schema, type_name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*CompositeTypeAttr
	for rows.Next() {
		var cta CompositeTypeAttr
		// scan
		if err := rows.Scan(&cta.FieldOrdinal, &cta.AttrName, &cta.DataType, &cta.NotNull, &cta.Comment); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cta)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
